{"version":3,"sources":["logo.svg","Components/Cockpit.js","actions/second.action.js","App.js","reportWebVitals.js","reducers/second.reducer.js","index.js"],"names":["withRouter","props","console","log","sendAuthData","payload","connect","state","dispatch","sendAuthDataToStore","inputValueRef","React","createRef","textAreaRef","myForm","FormBuilder","group","handleSubmit","event","preventDefault","current","value","control","render","get","invalid","reset","onSubmit","name","options","validators","Validators","required","handler","touched","hasError","onClick","axios","post","then","res","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","authData","secondReducer","action","type","store1","createStore","ReactDOM","StrictMode","store","age","document","getElementById"],"mappings":"oNAAe,I,sBCeAA,aAbC,SAACC,GAKb,OAJAC,QAAQC,IAAI,kBAAkBF,GAK1B,0CAEI,mD,kDCGGG,EARM,SAACC,GAClB,MAAO,CACH,KAAQ,WACR,QAAWA,IC0JJC,eAXS,SAAAC,GAAK,sBACxBA,MAGsB,SAAAC,GAAQ,MACjC,CACDC,oBAAsB,SAACJ,GAAD,OAAaG,EAASJ,EAAaC,QAK3CC,EAxIH,SAACL,GAIX,IAAMS,EAAgBC,IAAMC,YACtBC,EAAcF,IAAMC,YAE1BV,QAAQC,IAAI,iBAAiBF,GAC7B,IAAMa,EAASC,IAAYC,MAAM,CAC/B,SAAY,GACZ,OAAU,GACV,UAAa,CAAC,IACd,YAAe,CAAC,MAkBZC,EAAe,SAACC,GACpBA,EAAMC,iBACNjB,QAAQC,IAAI,mBAAmBO,EAAcU,QAAQC,OACrDnB,QAAQC,IAAI,sBAAsBU,EAAYO,QAAQC,QAoBxD,OACE,gCAGD,cAAC,IAAD,CAAYC,QAAWR,EACrBS,OAAU,cAAEC,IAAF,EAAOC,QAAP,EAAgBC,MAAhB,EAAuBL,MAAvB,OACP,uBAAMM,SAAUV,EAAhB,UAEA,cAAC,IAAD,CACEW,KAAK,WACLC,QAAS,CAAEC,WAAYC,IAAWC,UAClCT,OAAQ,gBAAEU,EAAF,EAAEA,QAASC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,SAApB,OACN,gCACE,mDACA,qCAAWF,MACX,+BACOC,GAAWC,EAAS,aAAe,+BAMhD,cAAC,IAAD,CACEP,KAAK,SACLL,OAAQ,gBAAEU,EAAF,EAAEA,QAAF,OACN,gCACI,kDACF,qCAAWA,YAIf,cAAC,IAAD,CACYL,KAAK,YACLL,OAAQ,gBAAEU,EAAF,EAAEA,QAAF,OACN,gCACI,uDACF,qCAAWA,EAAQ,qBAKO,IAAhCnB,EAAOU,IAAI,aAAaH,MAAe,8BACvC,cAAC,IAAD,CACVO,KAAK,UACLL,OAAQ,gBAAEU,EAAF,EAAEA,QAAF,OACN,gCACI,2DACF,qCAAWA,cAIG,SASzB,wBAAQG,QA5EU,WAEjB,IAEM/B,EAAU,CACd,SAHeS,EAAOU,IAAI,YAAYH,MAItC,SAHeP,EAAOU,IAAI,UAAUH,OAMtCgB,IAAMC,KAAK,8CAA8CjC,GAASkC,MAAK,SAAAC,GAAG,OAAEtC,QAAQC,IAAIqC,OAmEzF,0BC/HYC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBJ,MAAK,YAAkD,IAA/CK,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,QCFRO,EAAe,CACjBC,SAAU,IAgBCC,EAXO,WAAiC,IAAhC5C,EAA+B,uDAAxB0C,EAAaG,EAAW,uCAClD,OAAOA,EAAOC,MACV,IAAK,WACD,OAAO,2BACA9C,GADP,IAEI2C,SAAUE,EAAO/C,UAEzB,QACI,OAAOE,ICPb+C,EAASC,YAAYJ,GAE3BK,IAASjC,OACP,cAAC,IAAMkC,WAAP,UACE,cAAC,IAAD,CAAUC,MAASJ,EAAnB,SACA,cAAC,EAAD,CAAK1B,KAAK,OAAO+B,IAAI,WAQvBC,SAASC,eAAe,SA8B1BpB,M","file":"static/js/main.354a9336.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { withRouter } from \"react-router\";\n\nconst Cockpit = (props) => {\n    console.log('cockpit props--',props);\n    // navigateHandler = ()=> {\n    //     props.history.replace('/')\n    // }\n    return (\n        <div>\n            Cockpit\n            <button >Go Back</button>\n        </div>\n    )\n}\n\nexport default withRouter(Cockpit);","//Action will always return two things\n    //a) action type\n    //b) payload\n\n//Components -> Action -> Reducer -> Store\nconst sendAuthData = (payload) => {\n    return {\n        'type': 'SET_AUTH',\n        'payload': payload\n\n    }\n}\n\nexport default sendAuthData;","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport Person from './Components/Person';\nimport {useState,useEffect} from 'react';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { AppBar, Button, IconButton, Toolbar, Typography } from '@material-ui/core';\nimport Header from './Components/Header';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport Cockpit from './Components/Cockpit';\nimport axios from 'axios'\nimport {\n  FormBuilder,\n  FieldGroup,\n  FieldControl,\n  Validators\n} from \"react-reactive-form\";\nimport { connect } from 'react-redux';\nimport sendAuthData from './actions/second.action';\n\n\n\n//uncontrlled components\n//we will be using refs\n\nconst App = (props) => {\n\n  // const [selectedValue,setInputValue] = useState('mango');\n\n  const inputValueRef = React.createRef()\n  const textAreaRef = React.createRef();\n\n  console.log('props-- App.js',props);\n  const myForm = FormBuilder.group({\n    'username': '',\n    'passwd': '',\n    'isChecked': [''],\n    'vaccineName': ['']\n  });\n  \n\n   \n\n\n\n\n\n  // const nameChangeHandler = (event) =>{\n  //   setPersonName(event.target.value);\n  //   setPersonAge(27);\n  // }\n\n  // const getInputValue = (event) => {\n  //   setInputValue(event.target.value);\n  // }\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    console.log('usertypedinput--',inputValueRef.current.value);\n    console.log('usertypedtextarea--',textAreaRef.current.value);\n\n  }\n\n  const submitForm = () => {\n\n    const username = myForm.get('username').value;\n    const password = myForm.get('passwd').value;\n    const payload = {\n      'username': username,\n      'password': password\n    }\n\n    axios.post('http://localhost:9000/todo/authenticateuser',payload).then(res=>console.log(res));\n\n  }\n\n  \n\n\n  return (\n    <div>\n\n    \n   <FieldGroup control = {myForm}\n     render = {({get, invalid, reset, value }) => (\n        <form onSubmit={handleSubmit}>\n \n        <FieldControl\n          name=\"username\"\n          options={{ validators: Validators.required }}\n          render={({handler, touched, hasError}) => (\n            <div>\n              <label>Enter Username</label>\n              <input {...handler()}/>\n              <span>\n                    {touched && hasError('required') && 'Password is required'}\n                  </span>\n            </div>\n          )}\n        />\n\n        <FieldControl\n          name=\"passwd\"\n          render={({handler}) => (\n            <div>\n                <label>Enter Pasword</label>\n              <input {...handler()}/>\n            </div>\n          )}\n        />\n          <FieldControl\n                      name=\"isChecked\"\n                      render={({handler}) => (\n                        <div>\n                            <label>Are you Vaccinated</label>\n                          <input {...handler(\"checkbox\")}/>\n                        </div>\n                      )}\n                    />\n                    {\n                    myForm.get('isChecked').value===true ? <div>\n                    <FieldControl\n          name=\"vaccine\"\n          render={({handler}) => (\n            <div>\n                <label>Enter the vaccine name</label>\n              <input {...handler()}/>\n            </div>\n          )}\n        />\n                    </div>: ''}\n\n                            </form>\n\n     )\n\n     \n     } >\n   </FieldGroup>\n   <button onClick = {submitForm}>Submit</button>\n   </div>\n   \n  )\n}\n\n\n\n\n// export const App; //named export\n\n\nconst mapStateToProps = state => ({\n  ...state\n});\n//sendAuthDataToStore is a action creator which helps in trggering yur sendAuthData action from app componnent\nconst mapDispatchToProps = dispatch => (\n  {\n sendAuthDataToStore : (payload) => dispatch(sendAuthData(payload))\n}\n);\n\n\nexport default connect( mapStateToProps,mapDispatchToProps)(App)\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","//A reducer is just a function which will modfy the state\n// 'type': 'SET_AUTH',\n//'data': payload\n\n\nconst initialState = {\n    authData: {}\n}\n\n\n\nconst secondReducer = (state= initialState,action) => {\n    switch(action.type) {\n        case 'SET_AUTH':\n            return {\n                ...state,\n                authData: action.payload\n            }\n        default:\n            return state;\n    }\n}\nexport default secondReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport Person from './Components/Person';\nimport { Provider } from 'react-redux';\nimport {createStore} from 'redux';\nimport firstReducer from './reducers/first.reducer';\nimport secondReducer from './reducers/second.reducer';\n//My store has been created\nconst store1 = createStore(secondReducer)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store1}>\n    <App name=\"alex\" age=\"23\" />\n    </Provider>\n  \n   \n    {/* <App  name=\"maria\" age=\"34\" />\n    <App name = \"john\" age=\"28\" >App Html from index</App> */}\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n//1) install pacakges -> redux react-redux\n//2) creation of  the store\n      //a) reducer \n//3) Connect your app to the store.(Provider)\n//4 make actions and reducers\n//5 trigger action from component\n\n//SWITCH(ACTION_TYPE):\n//case GET_ALL_STUDENT_DATA:\n//return all syudent data//\n//case GET_TOP_STUDENT_DATA:\n//return Top Students \n//store -> store is something which keeps your data.\n//reducer -> a function which returns data from the store.(state) based on the action type\n//actiontype -> GET_ALL_STUDENT_DATA\n//action type -> GET_TOP_STUDENT_DATA\n\n//Component -> Trigger a action with actiontype GET_TOP_STUDENT_DATA -> Action will call the reducer -> Reducer will go to Store and get the data -> data will be retuned to component\n//actioncreator\n//dispatch\n//select\n//Provider -> gives access to the store\n//middleware -> actions and reducers(why middleware is used in redux??)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n//Make a reactive form -> two inputs Name and Email Id a radio button will be for gender a checkbox(Are you married) input label \n"],"sourceRoot":""}